{"version":3,"sources":["cryptio.png","converter/Converter.js","App.js","index.js"],"names":["module","exports","axios","require","useStyles","makeStyles","theme","button","margin","spacing","input","display","container","flexWrap","textField","marginLeft","marginRight","width","dense","marginTop","menu","Converter","classes","useState","baseISO","setBase","quoteISO","setQuote","value","setValue","result","setResult","rate","setRate","errorStatus","setErrorStatus","className","Container","maxWidth","TextField","error","id","label","onChange","event","target","variant","type","InputLabelProps","shrink","Button","size","onClick","payload","base_currency","toLocaleUpperCase","quote_currency","toUpperCase","post","then","resp","console","log","status","data","res","catch","err","color","Number","toFixed","App","src","cryptio","height","ReactDOM","render","document","getElementById"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,qC,wOCOrCC,G,MAAQC,EAAQ,KAEhBC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,IAExBC,MAAO,CACLC,QAAS,QAEXC,UAAW,CACTD,QAAS,OACTE,SAAU,QAEZC,UAAW,CACTC,WAAYT,EAAMG,QAAQ,GAC1BO,YAAaV,EAAMG,QAAQ,GAC3BQ,MAAO,KAETC,MAAO,CACLC,UAAW,IAEbC,KAAM,CACJH,MAAO,QAoGEI,EAhGG,WACd,IAAMC,EAAUlB,IADI,EAEOmB,mBAAS,OAFhB,mBAEbC,EAFa,KAEJC,EAFI,OAGSF,mBAAS,OAHlB,mBAGbG,EAHa,KAGHC,EAHG,OAIMJ,mBAAS,GAJf,mBAIbK,EAJa,KAINC,EAJM,OAKQN,mBAAS,GALjB,mBAKbO,EALa,KAKLC,EALK,OAMIR,mBAAS,GANb,mBAMbS,EANa,KAMPC,EANO,OAOkBV,oBAAS,GAP3B,mBAObW,EAPa,KAOAC,EAPA,KA0CpB,OACI,yBAAKC,UAAU,iBACX,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKF,UAAU,aAC/B,kBAACG,EAAA,EAAD,CAAWC,MAAON,EAClBO,GAAG,gBACHC,MAAM,oBACNN,UAAWd,EAAQR,UACnBc,MAAOJ,EACPmB,SAzCa,SAACC,GACtBnB,EAAQmB,EAAMC,OAAOjB,QAyCbpB,OAAO,SACPsC,QAAQ,aAER,kBAACP,EAAA,EAAD,CACAE,GAAG,kBACHC,MAAM,QACNd,MAAOA,EACPe,SA3Cc,SAACC,GACvBf,EAASe,EAAMC,OAAOjB,QA2CdmB,KAAK,SACLX,UAAWd,EAAQR,UACnBkC,gBAAiB,CACjBC,QAAQ,GAERzC,OAAO,SACPsC,QAAQ,aAER,kBAACP,EAAA,EAAD,CAAWC,MAAON,EAClBO,GAAG,gBACHC,MAAM,qBACNN,UAAWd,EAAQR,UACnBc,MAAOF,EACPiB,SA5Dc,SAACC,GACvBjB,EAASiB,EAAMC,OAAOjB,QA4DdpB,OAAO,SACPsC,QAAQ,aA9BZ,IA8ByB,6BAErB,kBAACI,EAAA,EAAD,CACAC,KAAK,QACLC,QA3DI,WACZ,IAAMC,EAAU,CACZC,cAAe9B,EAAQ+B,oBACvB3B,MAAOA,EACP4B,eAAgB9B,EAAS+B,eAE7BvD,EAAMwD,KAAK,gCAAiCL,GAC3CM,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACQ,MAAhBA,EAAKG,QAIThC,EAAU6B,EAAKI,KAAKC,KACpBhC,EAAQ2B,EAAKI,KAAKhC,MAClBG,GAAe,IALXA,GAAe,KAMpB+B,MAAM,SAACC,GACNN,QAAQC,IAAIK,GACZhC,GAAe,MA0CXW,QAAQ,WACRsB,MAAM,UACNhC,UAAWd,EAAQf,QALnB,WAhCJ,IAuCc,6BACV,0BAAM6B,UAAU,OAAhB,KACA,0BAAMA,UAAU,UACZ,0BAAMA,UAAU,UAAUiC,OAAQvC,EAAQwC,QAAQ,IAAM,KAAW,0BAAMlC,UAAU,UAAUV,IAEjG,0BAAMU,UAAU,QACZ,0BAAMA,UAAU,WAAWV,EAA3B,YAAmD,0BAAMU,UAAU,UAAUiC,OAAQrC,EAAMsC,QAAQ,IAAM,S,iBCxG9GC,MAbf,WACE,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,QAAQoC,IAAKC,IAASxD,MAAM,MAAMyD,OAAO,OACxD,uBAAGtC,UAAU,SAAb,+BACA,wBAAIA,UAAU,YAAd,mBAEF,kBAAC,EAAD,QCRNuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1a0b85bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptio.47be1122.png\";","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport \"./Converter.css\"\n\nconst axios = require(\"axios\")\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n    input: {\n      display: 'none',\n    },\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n    dense: {\n      marginTop: 19,\n    },\n    menu: {\n      width: 200,\n    },\n}));\n\nconst Converter = () => {\n    const classes = useStyles();\n    const [baseISO, setBase] = useState(\"EUR\")\n    const [quoteISO, setQuote] = useState(\"USD\")\n    const [value, setValue] = useState(0)\n    const [result, setResult] = useState(0)\n    const [rate, setRate] = useState(0)\n    const [errorStatus, setErrorStatus] = useState(false)\n\n    const handleChangeBase = (event) => {\n        setBase(event.target.value)\n    }\n    const handleChangeQuote = (event) => {\n        setQuote(event.target.value)\n    }\n    const handleChangeValue = (event) => {\n        setValue(event.target.value)\n    }\n\n    const onClick = () => { \n        const payload = {\n            base_currency: baseISO.toLocaleUpperCase(), \n            value: value, \n            quote_currency: quoteISO.toUpperCase()\n        }\n        axios.post(\"http://localhost:5000/convert\", payload)\n        .then((resp) => {\n            console.log(resp)\n            if (resp.status !== 200) {\n                setErrorStatus(true)\n                return\n            }\n            setResult(resp.data.res)\n            setRate(resp.data.rate)\n            setErrorStatus(false)\n        }).catch((err) => {\n            console.log(err)\n            setErrorStatus(true)\n            return\n        })\n    }\n   \n    return (\n        <div className=\"converterRoot\">\n            <Container maxWidth=\"md\" className=\"container\">\n                <TextField error={errorStatus}\n                id=\"standard-name\"\n                label=\"Base currency ISO\"\n                className={classes.textField}\n                value={baseISO}\n                onChange={handleChangeBase}\n                margin=\"normal\"\n                variant=\"outlined\"/>\n                \n                <TextField\n                id=\"standard-number\"\n                label=\"Value\"\n                value={value}\n                onChange={handleChangeValue}\n                type=\"number\"\n                className={classes.textField}\n                InputLabelProps={{\n                shrink: true,\n                }}\n                margin=\"normal\"\n                variant=\"outlined\"/>\n                \n                <TextField error={errorStatus}\n                id=\"standard-name\"\n                label=\"Quote currency ISO\"\n                className={classes.textField}\n                value={quoteISO}\n                onChange={handleChangeQuote}\n                margin=\"normal\"\n                variant=\"outlined\"/> <br/>\n\n                <Button\n                size=\"large\"\n                onClick={onClick}\n                variant=\"outlined\" \n                color=\"inherit\" \n                className={classes.button}>\n                CONVERT\n                </Button> <br/>\n                <text className=\"txt\">.</text>\n                <span className=\"resDiv\">\n                    <text className=\"result\">{Number((result).toFixed(2)) + \" \"}</text><text className=\"resISO\">{quoteISO}</text>\n                </span> \n                <span className=\"rate\">\n                    <text className=\"rateTxt\">{quoteISO} Rate : </text><text className=\"result\">{Number((rate).toFixed(5)) + \" \"}</text>\n                </span>\n            </Container>\n        </div>\n    )\n}\n\nexport default Converter","import React from 'react';\nimport './App.css';\nimport Converter from './converter/Converter'\nimport cryptio from './cryptio.png'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"image\" src={cryptio} width=\"234\" height=\"62\"/>\n        <p className=\"title\">Currency conversion service</p>\n        <p3 className=\"subtitle\">A Cryptio test</p3>\n      </header>\n      <Converter/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}